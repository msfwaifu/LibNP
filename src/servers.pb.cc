// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "servers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_servers_2eproto() {
  delete SessionInfo::default_instance_;
  delete ServersCreateSessionMessage::default_instance_;
  delete ServersCreateSessionResultMessage::default_instance_;
  delete ServersGetSessionsMessage::default_instance_;
  delete ServersGetSessionsResultMessage::default_instance_;
  delete ServersUpdateSessionMessage::default_instance_;
  delete ServersUpdateSessionResultMessage::default_instance_;
  delete ServersDeleteSessionMessage::default_instance_;
  delete ServersDeleteSessionResultMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_servers_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_servers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SessionInfo::default_instance_ = new SessionInfo();
  ServersCreateSessionMessage::default_instance_ = new ServersCreateSessionMessage();
  ServersCreateSessionResultMessage::default_instance_ = new ServersCreateSessionResultMessage();
  ServersGetSessionsMessage::default_instance_ = new ServersGetSessionsMessage();
  ServersGetSessionsResultMessage::default_instance_ = new ServersGetSessionsResultMessage();
  ServersUpdateSessionMessage::default_instance_ = new ServersUpdateSessionMessage();
  ServersUpdateSessionResultMessage::default_instance_ = new ServersUpdateSessionResultMessage();
  ServersDeleteSessionMessage::default_instance_ = new ServersDeleteSessionMessage();
  ServersDeleteSessionResultMessage::default_instance_ = new ServersDeleteSessionResultMessage();
  SessionInfo::default_instance_->InitAsDefaultInstance();
  ServersCreateSessionMessage::default_instance_->InitAsDefaultInstance();
  ServersCreateSessionResultMessage::default_instance_->InitAsDefaultInstance();
  ServersGetSessionsMessage::default_instance_->InitAsDefaultInstance();
  ServersGetSessionsResultMessage::default_instance_->InitAsDefaultInstance();
  ServersUpdateSessionMessage::default_instance_->InitAsDefaultInstance();
  ServersUpdateSessionResultMessage::default_instance_->InitAsDefaultInstance();
  ServersDeleteSessionMessage::default_instance_->InitAsDefaultInstance();
  ServersDeleteSessionResultMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_servers_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_servers_2eproto_once_);
void protobuf_AddDesc_servers_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_servers_2eproto_once_,
                 &protobuf_AddDesc_servers_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_servers_2eproto {
  StaticDescriptorInitializer_servers_2eproto() {
    protobuf_AddDesc_servers_2eproto();
  }
} static_descriptor_initializer_servers_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SessionInfo::kAddressFieldNumber;
const int SessionInfo::kPortFieldNumber;
const int SessionInfo::kNpidFieldNumber;
const int SessionInfo::kHostnameFieldNumber;
const int SessionInfo::kMapnameFieldNumber;
const int SessionInfo::kPlayersFieldNumber;
const int SessionInfo::kMaxplayersFieldNumber;
const int SessionInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

SessionInfo::SessionInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SessionInfo)
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SessionInfo)
}

void SessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = 0u;
  port_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  players_ = 0;
  maxplayers_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionInfo& SessionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

SessionInfo* SessionInfo::default_instance_ = NULL;

SessionInfo* SessionInfo::New() const {
  return new SessionInfo;
}

void SessionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SessionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(address_, npid_);
    ZR_(players_, version_);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_npid;
        break;
      }

      // optional fixed64 npid = 3;
      case 3: {
        if (tag == 25) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }

      // optional string hostname = 4;
      case 4: {
        if (tag == 34) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mapname;
        break;
      }

      // optional string mapname = 5;
      case 5: {
        if (tag == 42) {
         parse_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_players;
        break;
      }

      // optional int32 players = 6;
      case 6: {
        if (tag == 48) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxplayers;
        break;
      }

      // optional int32 maxplayers = 7;
      case 7: {
        if (tag == 56) {
         parse_maxplayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
          set_has_maxplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional int32 version = 8;
      case 8: {
        if (tag == 64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SessionInfo)
  // optional uint32 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->address(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional fixed64 npid = 3;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->npid(), output);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // optional string mapname = 5;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mapname(), output);
  }

  // optional int32 players = 6;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->players(), output);
  }

  // optional int32 maxplayers = 7;
  if (has_maxplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxplayers(), output);
  }

  // optional int32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SessionInfo)
}

int SessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->address());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional fixed64 npid = 3;
    if (has_npid()) {
      total_size += 1 + 8;
    }

    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string mapname = 5;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional int32 players = 6;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->players());
    }

    // optional int32 maxplayers = 7;
    if (has_maxplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayers());
    }

    // optional int32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionInfo*>(&from));
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_maxplayers()) {
      set_maxplayers(from.maxplayers());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {

  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(npid_, other->npid_);
    std::swap(hostname_, other->hostname_);
    std::swap(mapname_, other->mapname_);
    std::swap(players_, other->players_);
    std::swap(maxplayers_, other->maxplayers_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionInfo::GetTypeName() const {
  return "SessionInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersCreateSessionMessage::kInfoFieldNumber;
#endif  // !_MSC_VER

ServersCreateSessionMessage::ServersCreateSessionMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersCreateSessionMessage)
}

void ServersCreateSessionMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::SessionInfo*>(
      ::SessionInfo::internal_default_instance());
#else
  info_ = const_cast< ::SessionInfo*>(&::SessionInfo::default_instance());
#endif
}

ServersCreateSessionMessage::ServersCreateSessionMessage(const ServersCreateSessionMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersCreateSessionMessage)
}

void ServersCreateSessionMessage::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersCreateSessionMessage::~ServersCreateSessionMessage() {
  // @@protoc_insertion_point(destructor:ServersCreateSessionMessage)
  SharedDtor();
}

void ServersCreateSessionMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void ServersCreateSessionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersCreateSessionMessage& ServersCreateSessionMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersCreateSessionMessage* ServersCreateSessionMessage::default_instance_ = NULL;

ServersCreateSessionMessage* ServersCreateSessionMessage::New() const {
  return new ServersCreateSessionMessage;
}

void ServersCreateSessionMessage::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::SessionInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersCreateSessionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersCreateSessionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersCreateSessionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersCreateSessionMessage)
  return false;
#undef DO_
}

void ServersCreateSessionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersCreateSessionMessage)
  // optional .SessionInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersCreateSessionMessage)
}

int ServersCreateSessionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersCreateSessionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersCreateSessionMessage*>(&from));
}

void ServersCreateSessionMessage::MergeFrom(const ServersCreateSessionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::SessionInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersCreateSessionMessage::CopyFrom(const ServersCreateSessionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersCreateSessionMessage::IsInitialized() const {

  return true;
}

void ServersCreateSessionMessage::Swap(ServersCreateSessionMessage* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersCreateSessionMessage::GetTypeName() const {
  return "ServersCreateSessionMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersCreateSessionResultMessage::kResultFieldNumber;
const int ServersCreateSessionResultMessage::kSessionidFieldNumber;
#endif  // !_MSC_VER

ServersCreateSessionResultMessage::ServersCreateSessionResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersCreateSessionResultMessage)
}

void ServersCreateSessionResultMessage::InitAsDefaultInstance() {
}

ServersCreateSessionResultMessage::ServersCreateSessionResultMessage(const ServersCreateSessionResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersCreateSessionResultMessage)
}

void ServersCreateSessionResultMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersCreateSessionResultMessage::~ServersCreateSessionResultMessage() {
  // @@protoc_insertion_point(destructor:ServersCreateSessionResultMessage)
  SharedDtor();
}

void ServersCreateSessionResultMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersCreateSessionResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersCreateSessionResultMessage& ServersCreateSessionResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersCreateSessionResultMessage* ServersCreateSessionResultMessage::default_instance_ = NULL;

ServersCreateSessionResultMessage* ServersCreateSessionResultMessage::New() const {
  return new ServersCreateSessionResultMessage;
}

void ServersCreateSessionResultMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServersCreateSessionResultMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sessionid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersCreateSessionResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersCreateSessionResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sessionid;
        break;
      }

      // optional fixed64 sessionid = 2;
      case 2: {
        if (tag == 17) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersCreateSessionResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersCreateSessionResultMessage)
  return false;
#undef DO_
}

void ServersCreateSessionResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersCreateSessionResultMessage)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional fixed64 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersCreateSessionResultMessage)
}

int ServersCreateSessionResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional fixed64 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersCreateSessionResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersCreateSessionResultMessage*>(&from));
}

void ServersCreateSessionResultMessage::MergeFrom(const ServersCreateSessionResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersCreateSessionResultMessage::CopyFrom(const ServersCreateSessionResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersCreateSessionResultMessage::IsInitialized() const {

  return true;
}

void ServersCreateSessionResultMessage::Swap(ServersCreateSessionResultMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersCreateSessionResultMessage::GetTypeName() const {
  return "ServersCreateSessionResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersGetSessionsMessage::kTagsFieldNumber;
#endif  // !_MSC_VER

ServersGetSessionsMessage::ServersGetSessionsMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersGetSessionsMessage)
}

void ServersGetSessionsMessage::InitAsDefaultInstance() {
}

ServersGetSessionsMessage::ServersGetSessionsMessage(const ServersGetSessionsMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersGetSessionsMessage)
}

void ServersGetSessionsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersGetSessionsMessage::~ServersGetSessionsMessage() {
  // @@protoc_insertion_point(destructor:ServersGetSessionsMessage)
  SharedDtor();
}

void ServersGetSessionsMessage::SharedDtor() {
  if (tags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tags_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersGetSessionsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersGetSessionsMessage& ServersGetSessionsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersGetSessionsMessage* ServersGetSessionsMessage::default_instance_ = NULL;

ServersGetSessionsMessage* ServersGetSessionsMessage::New() const {
  return new ServersGetSessionsMessage;
}

void ServersGetSessionsMessage::Clear() {
  if (has_tags()) {
    if (tags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      tags_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersGetSessionsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersGetSessionsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tags = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersGetSessionsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersGetSessionsMessage)
  return false;
#undef DO_
}

void ServersGetSessionsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersGetSessionsMessage)
  // optional string tags = 1;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersGetSessionsMessage)
}

int ServersGetSessionsMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tags = 1;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersGetSessionsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersGetSessionsMessage*>(&from));
}

void ServersGetSessionsMessage::MergeFrom(const ServersGetSessionsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tags()) {
      set_tags(from.tags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersGetSessionsMessage::CopyFrom(const ServersGetSessionsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersGetSessionsMessage::IsInitialized() const {

  return true;
}

void ServersGetSessionsMessage::Swap(ServersGetSessionsMessage* other) {
  if (other != this) {
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersGetSessionsMessage::GetTypeName() const {
  return "ServersGetSessionsMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersGetSessionsResultMessage::kServersFieldNumber;
#endif  // !_MSC_VER

ServersGetSessionsResultMessage::ServersGetSessionsResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersGetSessionsResultMessage)
}

void ServersGetSessionsResultMessage::InitAsDefaultInstance() {
}

ServersGetSessionsResultMessage::ServersGetSessionsResultMessage(const ServersGetSessionsResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersGetSessionsResultMessage)
}

void ServersGetSessionsResultMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersGetSessionsResultMessage::~ServersGetSessionsResultMessage() {
  // @@protoc_insertion_point(destructor:ServersGetSessionsResultMessage)
  SharedDtor();
}

void ServersGetSessionsResultMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersGetSessionsResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersGetSessionsResultMessage& ServersGetSessionsResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersGetSessionsResultMessage* ServersGetSessionsResultMessage::default_instance_ = NULL;

ServersGetSessionsResultMessage* ServersGetSessionsResultMessage::New() const {
  return new ServersGetSessionsResultMessage;
}

void ServersGetSessionsResultMessage::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersGetSessionsResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersGetSessionsResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SessionInfo servers = 1;
      case 1: {
        if (tag == 10) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersGetSessionsResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersGetSessionsResultMessage)
  return false;
#undef DO_
}

void ServersGetSessionsResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersGetSessionsResultMessage)
  // repeated .SessionInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->servers(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersGetSessionsResultMessage)
}

int ServersGetSessionsResultMessage::ByteSize() const {
  int total_size = 0;

  // repeated .SessionInfo servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersGetSessionsResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersGetSessionsResultMessage*>(&from));
}

void ServersGetSessionsResultMessage::MergeFrom(const ServersGetSessionsResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersGetSessionsResultMessage::CopyFrom(const ServersGetSessionsResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersGetSessionsResultMessage::IsInitialized() const {

  return true;
}

void ServersGetSessionsResultMessage::Swap(ServersGetSessionsResultMessage* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersGetSessionsResultMessage::GetTypeName() const {
  return "ServersGetSessionsResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersUpdateSessionMessage::kSessionidFieldNumber;
const int ServersUpdateSessionMessage::kHostnameFieldNumber;
const int ServersUpdateSessionMessage::kMapnameFieldNumber;
const int ServersUpdateSessionMessage::kPlayersFieldNumber;
const int ServersUpdateSessionMessage::kMaxplayersFieldNumber;
#endif  // !_MSC_VER

ServersUpdateSessionMessage::ServersUpdateSessionMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersUpdateSessionMessage)
}

void ServersUpdateSessionMessage::InitAsDefaultInstance() {
}

ServersUpdateSessionMessage::ServersUpdateSessionMessage(const ServersUpdateSessionMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersUpdateSessionMessage)
}

void ServersUpdateSessionMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  players_ = 0;
  maxplayers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersUpdateSessionMessage::~ServersUpdateSessionMessage() {
  // @@protoc_insertion_point(destructor:ServersUpdateSessionMessage)
  SharedDtor();
}

void ServersUpdateSessionMessage::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersUpdateSessionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersUpdateSessionMessage& ServersUpdateSessionMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersUpdateSessionMessage* ServersUpdateSessionMessage::default_instance_ = NULL;

ServersUpdateSessionMessage* ServersUpdateSessionMessage::New() const {
  return new ServersUpdateSessionMessage;
}

void ServersUpdateSessionMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServersUpdateSessionMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(players_, maxplayers_);
    sessionid_ = GOOGLE_ULONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersUpdateSessionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersUpdateSessionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 sessionid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (tag == 18) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mapname;
        break;
      }

      // optional string mapname = 3;
      case 3: {
        if (tag == 26) {
         parse_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_players;
        break;
      }

      // optional int32 players = 4;
      case 4: {
        if (tag == 32) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxplayers;
        break;
      }

      // optional int32 maxplayers = 5;
      case 5: {
        if (tag == 40) {
         parse_maxplayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
          set_has_maxplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersUpdateSessionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersUpdateSessionMessage)
  return false;
#undef DO_
}

void ServersUpdateSessionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersUpdateSessionMessage)
  // optional fixed64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->sessionid(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional string mapname = 3;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mapname(), output);
  }

  // optional int32 players = 4;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->players(), output);
  }

  // optional int32 maxplayers = 5;
  if (has_maxplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayers(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersUpdateSessionMessage)
}

int ServersUpdateSessionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 + 8;
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string mapname = 3;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional int32 players = 4;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->players());
    }

    // optional int32 maxplayers = 5;
    if (has_maxplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayers());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersUpdateSessionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersUpdateSessionMessage*>(&from));
}

void ServersUpdateSessionMessage::MergeFrom(const ServersUpdateSessionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_maxplayers()) {
      set_maxplayers(from.maxplayers());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersUpdateSessionMessage::CopyFrom(const ServersUpdateSessionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersUpdateSessionMessage::IsInitialized() const {

  return true;
}

void ServersUpdateSessionMessage::Swap(ServersUpdateSessionMessage* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(hostname_, other->hostname_);
    std::swap(mapname_, other->mapname_);
    std::swap(players_, other->players_);
    std::swap(maxplayers_, other->maxplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersUpdateSessionMessage::GetTypeName() const {
  return "ServersUpdateSessionMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersUpdateSessionResultMessage::kResultFieldNumber;
#endif  // !_MSC_VER

ServersUpdateSessionResultMessage::ServersUpdateSessionResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersUpdateSessionResultMessage)
}

void ServersUpdateSessionResultMessage::InitAsDefaultInstance() {
}

ServersUpdateSessionResultMessage::ServersUpdateSessionResultMessage(const ServersUpdateSessionResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersUpdateSessionResultMessage)
}

void ServersUpdateSessionResultMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersUpdateSessionResultMessage::~ServersUpdateSessionResultMessage() {
  // @@protoc_insertion_point(destructor:ServersUpdateSessionResultMessage)
  SharedDtor();
}

void ServersUpdateSessionResultMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersUpdateSessionResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersUpdateSessionResultMessage& ServersUpdateSessionResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersUpdateSessionResultMessage* ServersUpdateSessionResultMessage::default_instance_ = NULL;

ServersUpdateSessionResultMessage* ServersUpdateSessionResultMessage::New() const {
  return new ServersUpdateSessionResultMessage;
}

void ServersUpdateSessionResultMessage::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersUpdateSessionResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersUpdateSessionResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersUpdateSessionResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersUpdateSessionResultMessage)
  return false;
#undef DO_
}

void ServersUpdateSessionResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersUpdateSessionResultMessage)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersUpdateSessionResultMessage)
}

int ServersUpdateSessionResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersUpdateSessionResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersUpdateSessionResultMessage*>(&from));
}

void ServersUpdateSessionResultMessage::MergeFrom(const ServersUpdateSessionResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersUpdateSessionResultMessage::CopyFrom(const ServersUpdateSessionResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersUpdateSessionResultMessage::IsInitialized() const {

  return true;
}

void ServersUpdateSessionResultMessage::Swap(ServersUpdateSessionResultMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersUpdateSessionResultMessage::GetTypeName() const {
  return "ServersUpdateSessionResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersDeleteSessionMessage::kSessionidFieldNumber;
#endif  // !_MSC_VER

ServersDeleteSessionMessage::ServersDeleteSessionMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersDeleteSessionMessage)
}

void ServersDeleteSessionMessage::InitAsDefaultInstance() {
}

ServersDeleteSessionMessage::ServersDeleteSessionMessage(const ServersDeleteSessionMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersDeleteSessionMessage)
}

void ServersDeleteSessionMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersDeleteSessionMessage::~ServersDeleteSessionMessage() {
  // @@protoc_insertion_point(destructor:ServersDeleteSessionMessage)
  SharedDtor();
}

void ServersDeleteSessionMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersDeleteSessionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersDeleteSessionMessage& ServersDeleteSessionMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersDeleteSessionMessage* ServersDeleteSessionMessage::default_instance_ = NULL;

ServersDeleteSessionMessage* ServersDeleteSessionMessage::New() const {
  return new ServersDeleteSessionMessage;
}

void ServersDeleteSessionMessage::Clear() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersDeleteSessionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersDeleteSessionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 sessionid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersDeleteSessionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersDeleteSessionMessage)
  return false;
#undef DO_
}

void ServersDeleteSessionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersDeleteSessionMessage)
  // optional fixed64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersDeleteSessionMessage)
}

int ServersDeleteSessionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersDeleteSessionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersDeleteSessionMessage*>(&from));
}

void ServersDeleteSessionMessage::MergeFrom(const ServersDeleteSessionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersDeleteSessionMessage::CopyFrom(const ServersDeleteSessionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersDeleteSessionMessage::IsInitialized() const {

  return true;
}

void ServersDeleteSessionMessage::Swap(ServersDeleteSessionMessage* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersDeleteSessionMessage::GetTypeName() const {
  return "ServersDeleteSessionMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServersDeleteSessionResultMessage::kResultFieldNumber;
#endif  // !_MSC_VER

ServersDeleteSessionResultMessage::ServersDeleteSessionResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServersDeleteSessionResultMessage)
}

void ServersDeleteSessionResultMessage::InitAsDefaultInstance() {
}

ServersDeleteSessionResultMessage::ServersDeleteSessionResultMessage(const ServersDeleteSessionResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServersDeleteSessionResultMessage)
}

void ServersDeleteSessionResultMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersDeleteSessionResultMessage::~ServersDeleteSessionResultMessage() {
  // @@protoc_insertion_point(destructor:ServersDeleteSessionResultMessage)
  SharedDtor();
}

void ServersDeleteSessionResultMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServersDeleteSessionResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServersDeleteSessionResultMessage& ServersDeleteSessionResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_servers_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_servers_2eproto();
#endif
  return *default_instance_;
}

ServersDeleteSessionResultMessage* ServersDeleteSessionResultMessage::default_instance_ = NULL;

ServersDeleteSessionResultMessage* ServersDeleteSessionResultMessage::New() const {
  return new ServersDeleteSessionResultMessage;
}

void ServersDeleteSessionResultMessage::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServersDeleteSessionResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ServersDeleteSessionResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServersDeleteSessionResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServersDeleteSessionResultMessage)
  return false;
#undef DO_
}

void ServersDeleteSessionResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServersDeleteSessionResultMessage)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ServersDeleteSessionResultMessage)
}

int ServersDeleteSessionResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersDeleteSessionResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServersDeleteSessionResultMessage*>(&from));
}

void ServersDeleteSessionResultMessage::MergeFrom(const ServersDeleteSessionResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServersDeleteSessionResultMessage::CopyFrom(const ServersDeleteSessionResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersDeleteSessionResultMessage::IsInitialized() const {

  return true;
}

void ServersDeleteSessionResultMessage::Swap(ServersDeleteSessionResultMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServersDeleteSessionResultMessage::GetTypeName() const {
  return "ServersDeleteSessionResultMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
