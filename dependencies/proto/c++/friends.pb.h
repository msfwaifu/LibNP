// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends.proto

#ifndef PROTOBUF_friends_2eproto__INCLUDED
#define PROTOBUF_friends_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friends_2eproto();
void protobuf_AssignDesc_friends_2eproto();
void protobuf_ShutdownFile_friends_2eproto();

class FriendsSetPresenceMessage;
class FriendsPresence;
class FriendsGetUserAvatarMessage;
class FriendsGetUserAvatarResultMessage;
class FriendsRosterMessage;
class FriendsRosterMessage_FriendDetails;
class FriendsRequestRoster;

// ===================================================================

class FriendsSetPresenceMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsSetPresenceMessage();
  virtual ~FriendsSetPresenceMessage();

  FriendsSetPresenceMessage(const FriendsSetPresenceMessage& from);

  inline FriendsSetPresenceMessage& operator=(const FriendsSetPresenceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsSetPresenceMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsSetPresenceMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsSetPresenceMessage* other);

  // implements Message ----------------------------------------------

  FriendsSetPresenceMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsSetPresenceMessage& from);
  void MergeFrom(const FriendsSetPresenceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FriendsPresence presence = 1;
  inline int presence_size() const;
  inline void clear_presence();
  static const int kPresenceFieldNumber = 1;
  inline const ::FriendsPresence& presence(int index) const;
  inline ::FriendsPresence* mutable_presence(int index);
  inline ::FriendsPresence* add_presence();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendsPresence >&
      presence() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendsPresence >*
      mutable_presence();

  // @@protoc_insertion_point(class_scope:FriendsSetPresenceMessage)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FriendsPresence > presence_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsSetPresenceMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsPresence : public ::google::protobuf::MessageLite {
 public:
  FriendsPresence();
  virtual ~FriendsPresence();

  FriendsPresence(const FriendsPresence& from);

  inline FriendsPresence& operator=(const FriendsPresence& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsPresence& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsPresence* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsPresence* other);

  // implements Message ----------------------------------------------

  FriendsPresence* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsPresence& from);
  void MergeFrom(const FriendsPresence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:FriendsPresence)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsPresence* default_instance_;
};
// -------------------------------------------------------------------

class FriendsGetUserAvatarMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsGetUserAvatarMessage();
  virtual ~FriendsGetUserAvatarMessage();

  FriendsGetUserAvatarMessage(const FriendsGetUserAvatarMessage& from);

  inline FriendsGetUserAvatarMessage& operator=(const FriendsGetUserAvatarMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsGetUserAvatarMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsGetUserAvatarMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsGetUserAvatarMessage* other);

  // implements Message ----------------------------------------------

  FriendsGetUserAvatarMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsGetUserAvatarMessage& from);
  void MergeFrom(const FriendsGetUserAvatarMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendsGetUserAvatarMessage)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 guid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsGetUserAvatarMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsGetUserAvatarResultMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsGetUserAvatarResultMessage();
  virtual ~FriendsGetUserAvatarResultMessage();

  FriendsGetUserAvatarResultMessage(const FriendsGetUserAvatarResultMessage& from);

  inline FriendsGetUserAvatarResultMessage& operator=(const FriendsGetUserAvatarResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsGetUserAvatarResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsGetUserAvatarResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsGetUserAvatarResultMessage* other);

  // implements Message ----------------------------------------------

  FriendsGetUserAvatarResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsGetUserAvatarResultMessage& from);
  void MergeFrom(const FriendsGetUserAvatarResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required bytes fileData = 3;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 3;
  inline const ::std::string& filedata() const;
  inline void set_filedata(const ::std::string& value);
  inline void set_filedata(const char* value);
  inline void set_filedata(const void* value, size_t size);
  inline ::std::string* mutable_filedata();
  inline ::std::string* release_filedata();
  inline void set_allocated_filedata(::std::string* filedata);

  // @@protoc_insertion_point(class_scope:FriendsGetUserAvatarResultMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_filedata();
  inline void clear_has_filedata();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 guid_;
  ::std::string* filedata_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsGetUserAvatarResultMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsRosterMessage_FriendDetails : public ::google::protobuf::MessageLite {
 public:
  FriendsRosterMessage_FriendDetails();
  virtual ~FriendsRosterMessage_FriendDetails();

  FriendsRosterMessage_FriendDetails(const FriendsRosterMessage_FriendDetails& from);

  inline FriendsRosterMessage_FriendDetails& operator=(const FriendsRosterMessage_FriendDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsRosterMessage_FriendDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsRosterMessage_FriendDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsRosterMessage_FriendDetails* other);

  // implements Message ----------------------------------------------

  FriendsRosterMessage_FriendDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsRosterMessage_FriendDetails& from);
  void MergeFrom(const FriendsRosterMessage_FriendDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required int32 isonline = 3;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsonlineFieldNumber = 3;
  inline ::google::protobuf::int32 isonline() const;
  inline void set_isonline(::google::protobuf::int32 value);

  // required string game = 4;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 4;
  inline const ::std::string& game() const;
  inline void set_game(const ::std::string& value);
  inline void set_game(const char* value);
  inline void set_game(const char* value, size_t size);
  inline ::std::string* mutable_game();
  inline ::std::string* release_game();
  inline void set_allocated_game(::std::string* game);

  // required string hostname = 5;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 5;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // required string current_server = 6;
  inline bool has_current_server() const;
  inline void clear_current_server();
  static const int kCurrentServerFieldNumber = 6;
  inline const ::std::string& current_server() const;
  inline void set_current_server(const ::std::string& value);
  inline void set_current_server(const char* value);
  inline void set_current_server(const char* value, size_t size);
  inline ::std::string* mutable_current_server();
  inline ::std::string* release_current_server();
  inline void set_allocated_current_server(::std::string* current_server);

  // @@protoc_insertion_point(class_scope:FriendsRosterMessage.FriendDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_current_server();
  inline void clear_has_current_server();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 isonline_;
  ::std::string* game_;
  ::std::string* hostname_;
  ::std::string* current_server_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsRosterMessage_FriendDetails* default_instance_;
};
// -------------------------------------------------------------------

class FriendsRosterMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsRosterMessage();
  virtual ~FriendsRosterMessage();

  FriendsRosterMessage(const FriendsRosterMessage& from);

  inline FriendsRosterMessage& operator=(const FriendsRosterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsRosterMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsRosterMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsRosterMessage* other);

  // implements Message ----------------------------------------------

  FriendsRosterMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsRosterMessage& from);
  void MergeFrom(const FriendsRosterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef FriendsRosterMessage_FriendDetails FriendDetails;

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 numResults = 2;
  inline bool has_numresults() const;
  inline void clear_numresults();
  static const int kNumResultsFieldNumber = 2;
  inline ::google::protobuf::int32 numresults() const;
  inline void set_numresults(::google::protobuf::int32 value);

  // repeated .FriendsRosterMessage.FriendDetails friends = 3;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 3;
  inline const ::FriendsRosterMessage_FriendDetails& friends(int index) const;
  inline ::FriendsRosterMessage_FriendDetails* mutable_friends(int index);
  inline ::FriendsRosterMessage_FriendDetails* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendsRosterMessage_FriendDetails >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendsRosterMessage_FriendDetails >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:FriendsRosterMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_numresults();
  inline void clear_has_numresults();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 numresults_;
  ::google::protobuf::RepeatedPtrField< ::FriendsRosterMessage_FriendDetails > friends_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsRosterMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsRequestRoster : public ::google::protobuf::MessageLite {
 public:
  FriendsRequestRoster();
  virtual ~FriendsRequestRoster();

  FriendsRequestRoster(const FriendsRequestRoster& from);

  inline FriendsRequestRoster& operator=(const FriendsRequestRoster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendsRequestRoster& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsRequestRoster* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsRequestRoster* other);

  // implements Message ----------------------------------------------

  FriendsRequestRoster* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsRequestRoster& from);
  void MergeFrom(const FriendsRequestRoster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FriendsRequestRoster)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsRequestRoster* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendsSetPresenceMessage

// repeated .FriendsPresence presence = 1;
inline int FriendsSetPresenceMessage::presence_size() const {
  return presence_.size();
}
inline void FriendsSetPresenceMessage::clear_presence() {
  presence_.Clear();
}
inline const ::FriendsPresence& FriendsSetPresenceMessage::presence(int index) const {
  // @@protoc_insertion_point(field_get:FriendsSetPresenceMessage.presence)
  return presence_.Get(index);
}
inline ::FriendsPresence* FriendsSetPresenceMessage::mutable_presence(int index) {
  // @@protoc_insertion_point(field_mutable:FriendsSetPresenceMessage.presence)
  return presence_.Mutable(index);
}
inline ::FriendsPresence* FriendsSetPresenceMessage::add_presence() {
  // @@protoc_insertion_point(field_add:FriendsSetPresenceMessage.presence)
  return presence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendsPresence >&
FriendsSetPresenceMessage::presence() const {
  // @@protoc_insertion_point(field_list:FriendsSetPresenceMessage.presence)
  return presence_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendsPresence >*
FriendsSetPresenceMessage::mutable_presence() {
  // @@protoc_insertion_point(field_mutable_list:FriendsSetPresenceMessage.presence)
  return &presence_;
}

// -------------------------------------------------------------------

// FriendsPresence

// required string key = 1;
inline bool FriendsPresence::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsPresence::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsPresence::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsPresence::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FriendsPresence::key() const {
  // @@protoc_insertion_point(field_get:FriendsPresence.key)
  return *key_;
}
inline void FriendsPresence::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsPresence.key)
}
inline void FriendsPresence::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsPresence.key)
}
inline void FriendsPresence::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsPresence.key)
}
inline ::std::string* FriendsPresence::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsPresence.key)
  return key_;
}
inline ::std::string* FriendsPresence::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsPresence::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsPresence.key)
}

// required string value = 2;
inline bool FriendsPresence::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsPresence::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsPresence::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsPresence::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& FriendsPresence::value() const {
  // @@protoc_insertion_point(field_get:FriendsPresence.value)
  return *value_;
}
inline void FriendsPresence::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsPresence.value)
}
inline void FriendsPresence::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsPresence.value)
}
inline void FriendsPresence::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsPresence.value)
}
inline ::std::string* FriendsPresence::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsPresence.value)
  return value_;
}
inline ::std::string* FriendsPresence::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsPresence::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsPresence.value)
}

// -------------------------------------------------------------------

// FriendsGetUserAvatarMessage

// required int32 guid = 2;
inline bool FriendsGetUserAvatarMessage::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsGetUserAvatarMessage::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsGetUserAvatarMessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsGetUserAvatarMessage::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 FriendsGetUserAvatarMessage::guid() const {
  // @@protoc_insertion_point(field_get:FriendsGetUserAvatarMessage.guid)
  return guid_;
}
inline void FriendsGetUserAvatarMessage::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:FriendsGetUserAvatarMessage.guid)
}

// -------------------------------------------------------------------

// FriendsGetUserAvatarResultMessage

// required int32 result = 1;
inline bool FriendsGetUserAvatarResultMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsGetUserAvatarResultMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsGetUserAvatarResultMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsGetUserAvatarResultMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendsGetUserAvatarResultMessage::result() const {
  // @@protoc_insertion_point(field_get:FriendsGetUserAvatarResultMessage.result)
  return result_;
}
inline void FriendsGetUserAvatarResultMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendsGetUserAvatarResultMessage.result)
}

// required int32 guid = 2;
inline bool FriendsGetUserAvatarResultMessage::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsGetUserAvatarResultMessage::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsGetUserAvatarResultMessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsGetUserAvatarResultMessage::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 FriendsGetUserAvatarResultMessage::guid() const {
  // @@protoc_insertion_point(field_get:FriendsGetUserAvatarResultMessage.guid)
  return guid_;
}
inline void FriendsGetUserAvatarResultMessage::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:FriendsGetUserAvatarResultMessage.guid)
}

// required bytes fileData = 3;
inline bool FriendsGetUserAvatarResultMessage::has_filedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendsGetUserAvatarResultMessage::set_has_filedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendsGetUserAvatarResultMessage::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendsGetUserAvatarResultMessage::clear_filedata() {
  if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filedata_->clear();
  }
  clear_has_filedata();
}
inline const ::std::string& FriendsGetUserAvatarResultMessage::filedata() const {
  // @@protoc_insertion_point(field_get:FriendsGetUserAvatarResultMessage.fileData)
  return *filedata_;
}
inline void FriendsGetUserAvatarResultMessage::set_filedata(const ::std::string& value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsGetUserAvatarResultMessage.fileData)
}
inline void FriendsGetUserAvatarResultMessage::set_filedata(const char* value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsGetUserAvatarResultMessage.fileData)
}
inline void FriendsGetUserAvatarResultMessage::set_filedata(const void* value, size_t size) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsGetUserAvatarResultMessage.fileData)
}
inline ::std::string* FriendsGetUserAvatarResultMessage::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsGetUserAvatarResultMessage.fileData)
  return filedata_;
}
inline ::std::string* FriendsGetUserAvatarResultMessage::release_filedata() {
  clear_has_filedata();
  if (filedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filedata_;
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsGetUserAvatarResultMessage::set_allocated_filedata(::std::string* filedata) {
  if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filedata_;
  }
  if (filedata) {
    set_has_filedata();
    filedata_ = filedata;
  } else {
    clear_has_filedata();
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsGetUserAvatarResultMessage.fileData)
}

// -------------------------------------------------------------------

// FriendsRosterMessage_FriendDetails

// required int32 id = 1;
inline bool FriendsRosterMessage_FriendDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsRosterMessage_FriendDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsRosterMessage_FriendDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsRosterMessage_FriendDetails::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FriendsRosterMessage_FriendDetails::id() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.FriendDetails.id)
  return id_;
}
inline void FriendsRosterMessage_FriendDetails::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.FriendDetails.id)
}

// required string username = 2;
inline bool FriendsRosterMessage_FriendDetails::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsRosterMessage_FriendDetails::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsRosterMessage_FriendDetails::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsRosterMessage_FriendDetails::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& FriendsRosterMessage_FriendDetails::username() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.FriendDetails.username)
  return *username_;
}
inline void FriendsRosterMessage_FriendDetails::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.FriendDetails.username)
}
inline void FriendsRosterMessage_FriendDetails::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsRosterMessage.FriendDetails.username)
}
inline void FriendsRosterMessage_FriendDetails::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsRosterMessage.FriendDetails.username)
}
inline ::std::string* FriendsRosterMessage_FriendDetails::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsRosterMessage.FriendDetails.username)
  return username_;
}
inline ::std::string* FriendsRosterMessage_FriendDetails::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsRosterMessage_FriendDetails::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsRosterMessage.FriendDetails.username)
}

// required int32 isonline = 3;
inline bool FriendsRosterMessage_FriendDetails::has_isonline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendsRosterMessage_FriendDetails::set_has_isonline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendsRosterMessage_FriendDetails::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendsRosterMessage_FriendDetails::clear_isonline() {
  isonline_ = 0;
  clear_has_isonline();
}
inline ::google::protobuf::int32 FriendsRosterMessage_FriendDetails::isonline() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.FriendDetails.isonline)
  return isonline_;
}
inline void FriendsRosterMessage_FriendDetails::set_isonline(::google::protobuf::int32 value) {
  set_has_isonline();
  isonline_ = value;
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.FriendDetails.isonline)
}

// required string game = 4;
inline bool FriendsRosterMessage_FriendDetails::has_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendsRosterMessage_FriendDetails::set_has_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendsRosterMessage_FriendDetails::clear_has_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendsRosterMessage_FriendDetails::clear_game() {
  if (game_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_->clear();
  }
  clear_has_game();
}
inline const ::std::string& FriendsRosterMessage_FriendDetails::game() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.FriendDetails.game)
  return *game_;
}
inline void FriendsRosterMessage_FriendDetails::set_game(const ::std::string& value) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_ = new ::std::string;
  }
  game_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.FriendDetails.game)
}
inline void FriendsRosterMessage_FriendDetails::set_game(const char* value) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_ = new ::std::string;
  }
  game_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsRosterMessage.FriendDetails.game)
}
inline void FriendsRosterMessage_FriendDetails::set_game(const char* value, size_t size) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_ = new ::std::string;
  }
  game_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsRosterMessage.FriendDetails.game)
}
inline ::std::string* FriendsRosterMessage_FriendDetails::mutable_game() {
  set_has_game();
  if (game_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsRosterMessage.FriendDetails.game)
  return game_;
}
inline ::std::string* FriendsRosterMessage_FriendDetails::release_game() {
  clear_has_game();
  if (game_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_;
    game_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsRosterMessage_FriendDetails::set_allocated_game(::std::string* game) {
  if (game_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_;
  }
  if (game) {
    set_has_game();
    game_ = game;
  } else {
    clear_has_game();
    game_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsRosterMessage.FriendDetails.game)
}

// required string hostname = 5;
inline bool FriendsRosterMessage_FriendDetails::has_hostname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendsRosterMessage_FriendDetails::set_has_hostname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendsRosterMessage_FriendDetails::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendsRosterMessage_FriendDetails::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& FriendsRosterMessage_FriendDetails::hostname() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.FriendDetails.hostname)
  return *hostname_;
}
inline void FriendsRosterMessage_FriendDetails::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.FriendDetails.hostname)
}
inline void FriendsRosterMessage_FriendDetails::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsRosterMessage.FriendDetails.hostname)
}
inline void FriendsRosterMessage_FriendDetails::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsRosterMessage.FriendDetails.hostname)
}
inline ::std::string* FriendsRosterMessage_FriendDetails::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsRosterMessage.FriendDetails.hostname)
  return hostname_;
}
inline ::std::string* FriendsRosterMessage_FriendDetails::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsRosterMessage_FriendDetails::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsRosterMessage.FriendDetails.hostname)
}

// required string current_server = 6;
inline bool FriendsRosterMessage_FriendDetails::has_current_server() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendsRosterMessage_FriendDetails::set_has_current_server() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendsRosterMessage_FriendDetails::clear_has_current_server() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendsRosterMessage_FriendDetails::clear_current_server() {
  if (current_server_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    current_server_->clear();
  }
  clear_has_current_server();
}
inline const ::std::string& FriendsRosterMessage_FriendDetails::current_server() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.FriendDetails.current_server)
  return *current_server_;
}
inline void FriendsRosterMessage_FriendDetails::set_current_server(const ::std::string& value) {
  set_has_current_server();
  if (current_server_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    current_server_ = new ::std::string;
  }
  current_server_->assign(value);
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.FriendDetails.current_server)
}
inline void FriendsRosterMessage_FriendDetails::set_current_server(const char* value) {
  set_has_current_server();
  if (current_server_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    current_server_ = new ::std::string;
  }
  current_server_->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendsRosterMessage.FriendDetails.current_server)
}
inline void FriendsRosterMessage_FriendDetails::set_current_server(const char* value, size_t size) {
  set_has_current_server();
  if (current_server_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    current_server_ = new ::std::string;
  }
  current_server_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendsRosterMessage.FriendDetails.current_server)
}
inline ::std::string* FriendsRosterMessage_FriendDetails::mutable_current_server() {
  set_has_current_server();
  if (current_server_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    current_server_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FriendsRosterMessage.FriendDetails.current_server)
  return current_server_;
}
inline ::std::string* FriendsRosterMessage_FriendDetails::release_current_server() {
  clear_has_current_server();
  if (current_server_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = current_server_;
    current_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendsRosterMessage_FriendDetails::set_allocated_current_server(::std::string* current_server) {
  if (current_server_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete current_server_;
  }
  if (current_server) {
    set_has_current_server();
    current_server_ = current_server;
  } else {
    clear_has_current_server();
    current_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FriendsRosterMessage.FriendDetails.current_server)
}

// -------------------------------------------------------------------

// FriendsRosterMessage

// required int32 result = 1;
inline bool FriendsRosterMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsRosterMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsRosterMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsRosterMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendsRosterMessage::result() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.result)
  return result_;
}
inline void FriendsRosterMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.result)
}

// required int32 numResults = 2;
inline bool FriendsRosterMessage::has_numresults() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsRosterMessage::set_has_numresults() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsRosterMessage::clear_has_numresults() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsRosterMessage::clear_numresults() {
  numresults_ = 0;
  clear_has_numresults();
}
inline ::google::protobuf::int32 FriendsRosterMessage::numresults() const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.numResults)
  return numresults_;
}
inline void FriendsRosterMessage::set_numresults(::google::protobuf::int32 value) {
  set_has_numresults();
  numresults_ = value;
  // @@protoc_insertion_point(field_set:FriendsRosterMessage.numResults)
}

// repeated .FriendsRosterMessage.FriendDetails friends = 3;
inline int FriendsRosterMessage::friends_size() const {
  return friends_.size();
}
inline void FriendsRosterMessage::clear_friends() {
  friends_.Clear();
}
inline const ::FriendsRosterMessage_FriendDetails& FriendsRosterMessage::friends(int index) const {
  // @@protoc_insertion_point(field_get:FriendsRosterMessage.friends)
  return friends_.Get(index);
}
inline ::FriendsRosterMessage_FriendDetails* FriendsRosterMessage::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:FriendsRosterMessage.friends)
  return friends_.Mutable(index);
}
inline ::FriendsRosterMessage_FriendDetails* FriendsRosterMessage::add_friends() {
  // @@protoc_insertion_point(field_add:FriendsRosterMessage.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendsRosterMessage_FriendDetails >&
FriendsRosterMessage::friends() const {
  // @@protoc_insertion_point(field_list:FriendsRosterMessage.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendsRosterMessage_FriendDetails >*
FriendsRosterMessage::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:FriendsRosterMessage.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// FriendsRequestRoster


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friends_2eproto__INCLUDED
