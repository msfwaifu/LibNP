// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_storage_2eproto() {
  delete StorageGetPublisherFileMessage::default_instance_;
  delete StoragePublisherFileMessage::default_instance_;
  delete StorageGetUserFileMessage::default_instance_;
  delete StorageUserFileMessage::default_instance_;
  delete StorageWriteUserFileMessage::default_instance_;
  delete StorageWriteUserFileResultMessage::default_instance_;
  delete StorageSendRandomStringMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_storage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_storage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  StorageGetPublisherFileMessage::default_instance_ = new StorageGetPublisherFileMessage();
  StoragePublisherFileMessage::default_instance_ = new StoragePublisherFileMessage();
  StorageGetUserFileMessage::default_instance_ = new StorageGetUserFileMessage();
  StorageUserFileMessage::default_instance_ = new StorageUserFileMessage();
  StorageWriteUserFileMessage::default_instance_ = new StorageWriteUserFileMessage();
  StorageWriteUserFileResultMessage::default_instance_ = new StorageWriteUserFileResultMessage();
  StorageSendRandomStringMessage::default_instance_ = new StorageSendRandomStringMessage();
  StorageGetPublisherFileMessage::default_instance_->InitAsDefaultInstance();
  StoragePublisherFileMessage::default_instance_->InitAsDefaultInstance();
  StorageGetUserFileMessage::default_instance_->InitAsDefaultInstance();
  StorageUserFileMessage::default_instance_->InitAsDefaultInstance();
  StorageWriteUserFileMessage::default_instance_->InitAsDefaultInstance();
  StorageWriteUserFileResultMessage::default_instance_->InitAsDefaultInstance();
  StorageSendRandomStringMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_storage_2eproto_once_);
void protobuf_AddDesc_storage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_storage_2eproto_once_,
                 &protobuf_AddDesc_storage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storage_2eproto {
  StaticDescriptorInitializer_storage_2eproto() {
    protobuf_AddDesc_storage_2eproto();
  }
} static_descriptor_initializer_storage_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int StorageGetPublisherFileMessage::kFileNameFieldNumber;
#endif  // !_MSC_VER

StorageGetPublisherFileMessage::StorageGetPublisherFileMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageGetPublisherFileMessage)
}

void StorageGetPublisherFileMessage::InitAsDefaultInstance() {
}

StorageGetPublisherFileMessage::StorageGetPublisherFileMessage(const StorageGetPublisherFileMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageGetPublisherFileMessage)
}

void StorageGetPublisherFileMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageGetPublisherFileMessage::~StorageGetPublisherFileMessage() {
  // @@protoc_insertion_point(destructor:StorageGetPublisherFileMessage)
  SharedDtor();
}

void StorageGetPublisherFileMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageGetPublisherFileMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageGetPublisherFileMessage& StorageGetPublisherFileMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StorageGetPublisherFileMessage* StorageGetPublisherFileMessage::default_instance_ = NULL;

StorageGetPublisherFileMessage* StorageGetPublisherFileMessage::New() const {
  return new StorageGetPublisherFileMessage;
}

void StorageGetPublisherFileMessage::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StorageGetPublisherFileMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StorageGetPublisherFileMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageGetPublisherFileMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageGetPublisherFileMessage)
  return false;
#undef DO_
}

void StorageGetPublisherFileMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageGetPublisherFileMessage)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StorageGetPublisherFileMessage)
}

int StorageGetPublisherFileMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageGetPublisherFileMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageGetPublisherFileMessage*>(&from));
}

void StorageGetPublisherFileMessage::MergeFrom(const StorageGetPublisherFileMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StorageGetPublisherFileMessage::CopyFrom(const StorageGetPublisherFileMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageGetPublisherFileMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StorageGetPublisherFileMessage::Swap(StorageGetPublisherFileMessage* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageGetPublisherFileMessage::GetTypeName() const {
  return "StorageGetPublisherFileMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int StoragePublisherFileMessage::kResultFieldNumber;
const int StoragePublisherFileMessage::kFileNameFieldNumber;
const int StoragePublisherFileMessage::kFileDataFieldNumber;
#endif  // !_MSC_VER

StoragePublisherFileMessage::StoragePublisherFileMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StoragePublisherFileMessage)
}

void StoragePublisherFileMessage::InitAsDefaultInstance() {
}

StoragePublisherFileMessage::StoragePublisherFileMessage(const StoragePublisherFileMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StoragePublisherFileMessage)
}

void StoragePublisherFileMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoragePublisherFileMessage::~StoragePublisherFileMessage() {
  // @@protoc_insertion_point(destructor:StoragePublisherFileMessage)
  SharedDtor();
}

void StoragePublisherFileMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoragePublisherFileMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoragePublisherFileMessage& StoragePublisherFileMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StoragePublisherFileMessage* StoragePublisherFileMessage::default_instance_ = NULL;

StoragePublisherFileMessage* StoragePublisherFileMessage::New() const {
  return new StoragePublisherFileMessage;
}

void StoragePublisherFileMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StoragePublisherFileMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StoragePublisherFileMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // required string fileName = 2;
      case 2: {
        if (tag == 18) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fileData;
        break;
      }

      // required bytes fileData = 3;
      case 3: {
        if (tag == 26) {
         parse_fileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StoragePublisherFileMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StoragePublisherFileMessage)
  return false;
#undef DO_
}

void StoragePublisherFileMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StoragePublisherFileMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required bytes fileData = 3;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->filedata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StoragePublisherFileMessage)
}

int StoragePublisherFileMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required bytes fileData = 3;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filedata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoragePublisherFileMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoragePublisherFileMessage*>(&from));
}

void StoragePublisherFileMessage::MergeFrom(const StoragePublisherFileMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StoragePublisherFileMessage::CopyFrom(const StoragePublisherFileMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePublisherFileMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StoragePublisherFileMessage::Swap(StoragePublisherFileMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(filename_, other->filename_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoragePublisherFileMessage::GetTypeName() const {
  return "StoragePublisherFileMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageGetUserFileMessage::kFileNameFieldNumber;
const int StorageGetUserFileMessage::kNpidFieldNumber;
#endif  // !_MSC_VER

StorageGetUserFileMessage::StorageGetUserFileMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageGetUserFileMessage)
}

void StorageGetUserFileMessage::InitAsDefaultInstance() {
}

StorageGetUserFileMessage::StorageGetUserFileMessage(const StorageGetUserFileMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageGetUserFileMessage)
}

void StorageGetUserFileMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageGetUserFileMessage::~StorageGetUserFileMessage() {
  // @@protoc_insertion_point(destructor:StorageGetUserFileMessage)
  SharedDtor();
}

void StorageGetUserFileMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageGetUserFileMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageGetUserFileMessage& StorageGetUserFileMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StorageGetUserFileMessage* StorageGetUserFileMessage::default_instance_ = NULL;

StorageGetUserFileMessage* StorageGetUserFileMessage::New() const {
  return new StorageGetUserFileMessage;
}

void StorageGetUserFileMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    npid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StorageGetUserFileMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StorageGetUserFileMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 2;
      case 2: {
        if (tag == 17) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageGetUserFileMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageGetUserFileMessage)
  return false;
#undef DO_
}

void StorageGetUserFileMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageGetUserFileMessage)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required fixed64 npid = 2;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->npid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StorageGetUserFileMessage)
}

int StorageGetUserFileMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required fixed64 npid = 2;
    if (has_npid()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageGetUserFileMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageGetUserFileMessage*>(&from));
}

void StorageGetUserFileMessage::MergeFrom(const StorageGetUserFileMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StorageGetUserFileMessage::CopyFrom(const StorageGetUserFileMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageGetUserFileMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StorageGetUserFileMessage::Swap(StorageGetUserFileMessage* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(npid_, other->npid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageGetUserFileMessage::GetTypeName() const {
  return "StorageGetUserFileMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageUserFileMessage::kResultFieldNumber;
const int StorageUserFileMessage::kFileNameFieldNumber;
const int StorageUserFileMessage::kNpidFieldNumber;
const int StorageUserFileMessage::kFileDataFieldNumber;
#endif  // !_MSC_VER

StorageUserFileMessage::StorageUserFileMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageUserFileMessage)
}

void StorageUserFileMessage::InitAsDefaultInstance() {
}

StorageUserFileMessage::StorageUserFileMessage(const StorageUserFileMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageUserFileMessage)
}

void StorageUserFileMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npid_ = GOOGLE_ULONGLONG(0);
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageUserFileMessage::~StorageUserFileMessage() {
  // @@protoc_insertion_point(destructor:StorageUserFileMessage)
  SharedDtor();
}

void StorageUserFileMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageUserFileMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageUserFileMessage& StorageUserFileMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StorageUserFileMessage* StorageUserFileMessage::default_instance_ = NULL;

StorageUserFileMessage* StorageUserFileMessage::New() const {
  return new StorageUserFileMessage;
}

void StorageUserFileMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StorageUserFileMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StorageUserFileMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // required string fileName = 2;
      case 2: {
        if (tag == 18) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 3;
      case 3: {
        if (tag == 25) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fileData;
        break;
      }

      // required bytes fileData = 4;
      case 4: {
        if (tag == 34) {
         parse_fileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageUserFileMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageUserFileMessage)
  return false;
#undef DO_
}

void StorageUserFileMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageUserFileMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required fixed64 npid = 3;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->npid(), output);
  }

  // required bytes fileData = 4;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->filedata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StorageUserFileMessage)
}

int StorageUserFileMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required fixed64 npid = 3;
    if (has_npid()) {
      total_size += 1 + 8;
    }

    // required bytes fileData = 4;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filedata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageUserFileMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageUserFileMessage*>(&from));
}

void StorageUserFileMessage::MergeFrom(const StorageUserFileMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StorageUserFileMessage::CopyFrom(const StorageUserFileMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageUserFileMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void StorageUserFileMessage::Swap(StorageUserFileMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(filename_, other->filename_);
    std::swap(npid_, other->npid_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageUserFileMessage::GetTypeName() const {
  return "StorageUserFileMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageWriteUserFileMessage::kFileNameFieldNumber;
const int StorageWriteUserFileMessage::kNpidFieldNumber;
const int StorageWriteUserFileMessage::kFileDataFieldNumber;
#endif  // !_MSC_VER

StorageWriteUserFileMessage::StorageWriteUserFileMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageWriteUserFileMessage)
}

void StorageWriteUserFileMessage::InitAsDefaultInstance() {
}

StorageWriteUserFileMessage::StorageWriteUserFileMessage(const StorageWriteUserFileMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageWriteUserFileMessage)
}

void StorageWriteUserFileMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npid_ = GOOGLE_ULONGLONG(0);
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageWriteUserFileMessage::~StorageWriteUserFileMessage() {
  // @@protoc_insertion_point(destructor:StorageWriteUserFileMessage)
  SharedDtor();
}

void StorageWriteUserFileMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageWriteUserFileMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageWriteUserFileMessage& StorageWriteUserFileMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StorageWriteUserFileMessage* StorageWriteUserFileMessage::default_instance_ = NULL;

StorageWriteUserFileMessage* StorageWriteUserFileMessage::New() const {
  return new StorageWriteUserFileMessage;
}

void StorageWriteUserFileMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StorageWriteUserFileMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StorageWriteUserFileMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 2;
      case 2: {
        if (tag == 17) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fileData;
        break;
      }

      // required bytes fileData = 3;
      case 3: {
        if (tag == 26) {
         parse_fileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageWriteUserFileMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageWriteUserFileMessage)
  return false;
#undef DO_
}

void StorageWriteUserFileMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageWriteUserFileMessage)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required fixed64 npid = 2;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->npid(), output);
  }

  // required bytes fileData = 3;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->filedata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StorageWriteUserFileMessage)
}

int StorageWriteUserFileMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required fixed64 npid = 2;
    if (has_npid()) {
      total_size += 1 + 8;
    }

    // required bytes fileData = 3;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filedata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageWriteUserFileMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageWriteUserFileMessage*>(&from));
}

void StorageWriteUserFileMessage::MergeFrom(const StorageWriteUserFileMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StorageWriteUserFileMessage::CopyFrom(const StorageWriteUserFileMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageWriteUserFileMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StorageWriteUserFileMessage::Swap(StorageWriteUserFileMessage* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(npid_, other->npid_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageWriteUserFileMessage::GetTypeName() const {
  return "StorageWriteUserFileMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageWriteUserFileResultMessage::kResultFieldNumber;
const int StorageWriteUserFileResultMessage::kFileNameFieldNumber;
const int StorageWriteUserFileResultMessage::kNpidFieldNumber;
#endif  // !_MSC_VER

StorageWriteUserFileResultMessage::StorageWriteUserFileResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageWriteUserFileResultMessage)
}

void StorageWriteUserFileResultMessage::InitAsDefaultInstance() {
}

StorageWriteUserFileResultMessage::StorageWriteUserFileResultMessage(const StorageWriteUserFileResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageWriteUserFileResultMessage)
}

void StorageWriteUserFileResultMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageWriteUserFileResultMessage::~StorageWriteUserFileResultMessage() {
  // @@protoc_insertion_point(destructor:StorageWriteUserFileResultMessage)
  SharedDtor();
}

void StorageWriteUserFileResultMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageWriteUserFileResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageWriteUserFileResultMessage& StorageWriteUserFileResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StorageWriteUserFileResultMessage* StorageWriteUserFileResultMessage::default_instance_ = NULL;

StorageWriteUserFileResultMessage* StorageWriteUserFileResultMessage::New() const {
  return new StorageWriteUserFileResultMessage;
}

void StorageWriteUserFileResultMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StorageWriteUserFileResultMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(npid_, result_);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StorageWriteUserFileResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StorageWriteUserFileResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // required string fileName = 2;
      case 2: {
        if (tag == 18) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 3;
      case 3: {
        if (tag == 25) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageWriteUserFileResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageWriteUserFileResultMessage)
  return false;
#undef DO_
}

void StorageWriteUserFileResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageWriteUserFileResultMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required fixed64 npid = 3;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->npid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StorageWriteUserFileResultMessage)
}

int StorageWriteUserFileResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required fixed64 npid = 3;
    if (has_npid()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageWriteUserFileResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageWriteUserFileResultMessage*>(&from));
}

void StorageWriteUserFileResultMessage::MergeFrom(const StorageWriteUserFileResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StorageWriteUserFileResultMessage::CopyFrom(const StorageWriteUserFileResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageWriteUserFileResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StorageWriteUserFileResultMessage::Swap(StorageWriteUserFileResultMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(filename_, other->filename_);
    std::swap(npid_, other->npid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageWriteUserFileResultMessage::GetTypeName() const {
  return "StorageWriteUserFileResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int StorageSendRandomStringMessage::kRandomStringFieldNumber;
#endif  // !_MSC_VER

StorageSendRandomStringMessage::StorageSendRandomStringMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageSendRandomStringMessage)
}

void StorageSendRandomStringMessage::InitAsDefaultInstance() {
}

StorageSendRandomStringMessage::StorageSendRandomStringMessage(const StorageSendRandomStringMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageSendRandomStringMessage)
}

void StorageSendRandomStringMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  randomstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageSendRandomStringMessage::~StorageSendRandomStringMessage() {
  // @@protoc_insertion_point(destructor:StorageSendRandomStringMessage)
  SharedDtor();
}

void StorageSendRandomStringMessage::SharedDtor() {
  if (randomstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete randomstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StorageSendRandomStringMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageSendRandomStringMessage& StorageSendRandomStringMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_storage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
#endif
  return *default_instance_;
}

StorageSendRandomStringMessage* StorageSendRandomStringMessage::default_instance_ = NULL;

StorageSendRandomStringMessage* StorageSendRandomStringMessage::New() const {
  return new StorageSendRandomStringMessage;
}

void StorageSendRandomStringMessage::Clear() {
  if (has_randomstring()) {
    if (randomstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      randomstring_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StorageSendRandomStringMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:StorageSendRandomStringMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string randomString = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randomstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageSendRandomStringMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageSendRandomStringMessage)
  return false;
#undef DO_
}

void StorageSendRandomStringMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageSendRandomStringMessage)
  // required string randomString = 1;
  if (has_randomstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->randomstring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:StorageSendRandomStringMessage)
}

int StorageSendRandomStringMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string randomString = 1;
    if (has_randomstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randomstring());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageSendRandomStringMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageSendRandomStringMessage*>(&from));
}

void StorageSendRandomStringMessage::MergeFrom(const StorageSendRandomStringMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randomstring()) {
      set_randomstring(from.randomstring());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StorageSendRandomStringMessage::CopyFrom(const StorageSendRandomStringMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageSendRandomStringMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StorageSendRandomStringMessage::Swap(StorageSendRandomStringMessage* other) {
  if (other != this) {
    std::swap(randomstring_, other->randomstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StorageSendRandomStringMessage::GetTypeName() const {
  return "StorageSendRandomStringMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
