// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_friends_2eproto() {
  delete FriendsSetPresenceMessage::default_instance_;
  delete FriendsPresence::default_instance_;
  delete FriendsGetUserAvatarMessage::default_instance_;
  delete FriendsGetUserAvatarResultMessage::default_instance_;
  delete FriendsRosterMessage::default_instance_;
  delete FriendsRosterMessage_FriendDetails::default_instance_;
  delete FriendsRequestRoster::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_friends_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_friends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FriendsSetPresenceMessage::default_instance_ = new FriendsSetPresenceMessage();
  FriendsPresence::default_instance_ = new FriendsPresence();
  FriendsGetUserAvatarMessage::default_instance_ = new FriendsGetUserAvatarMessage();
  FriendsGetUserAvatarResultMessage::default_instance_ = new FriendsGetUserAvatarResultMessage();
  FriendsRosterMessage::default_instance_ = new FriendsRosterMessage();
  FriendsRosterMessage_FriendDetails::default_instance_ = new FriendsRosterMessage_FriendDetails();
  FriendsRequestRoster::default_instance_ = new FriendsRequestRoster();
  FriendsSetPresenceMessage::default_instance_->InitAsDefaultInstance();
  FriendsPresence::default_instance_->InitAsDefaultInstance();
  FriendsGetUserAvatarMessage::default_instance_->InitAsDefaultInstance();
  FriendsGetUserAvatarResultMessage::default_instance_->InitAsDefaultInstance();
  FriendsRosterMessage::default_instance_->InitAsDefaultInstance();
  FriendsRosterMessage_FriendDetails::default_instance_->InitAsDefaultInstance();
  FriendsRequestRoster::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friends_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_friends_2eproto_once_);
void protobuf_AddDesc_friends_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_friends_2eproto_once_,
                 &protobuf_AddDesc_friends_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friends_2eproto {
  StaticDescriptorInitializer_friends_2eproto() {
    protobuf_AddDesc_friends_2eproto();
  }
} static_descriptor_initializer_friends_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FriendsSetPresenceMessage::kPresenceFieldNumber;
#endif  // !_MSC_VER

FriendsSetPresenceMessage::FriendsSetPresenceMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsSetPresenceMessage)
}

void FriendsSetPresenceMessage::InitAsDefaultInstance() {
}

FriendsSetPresenceMessage::FriendsSetPresenceMessage(const FriendsSetPresenceMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsSetPresenceMessage)
}

void FriendsSetPresenceMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsSetPresenceMessage::~FriendsSetPresenceMessage() {
  // @@protoc_insertion_point(destructor:FriendsSetPresenceMessage)
  SharedDtor();
}

void FriendsSetPresenceMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsSetPresenceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsSetPresenceMessage& FriendsSetPresenceMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsSetPresenceMessage* FriendsSetPresenceMessage::default_instance_ = NULL;

FriendsSetPresenceMessage* FriendsSetPresenceMessage::New() const {
  return new FriendsSetPresenceMessage;
}

void FriendsSetPresenceMessage::Clear() {
  presence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsSetPresenceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsSetPresenceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendsPresence presence = 1;
      case 1: {
        if (tag == 10) {
         parse_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_presence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_presence;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsSetPresenceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsSetPresenceMessage)
  return false;
#undef DO_
}

void FriendsSetPresenceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsSetPresenceMessage)
  // repeated .FriendsPresence presence = 1;
  for (int i = 0; i < this->presence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->presence(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsSetPresenceMessage)
}

int FriendsSetPresenceMessage::ByteSize() const {
  int total_size = 0;

  // repeated .FriendsPresence presence = 1;
  total_size += 1 * this->presence_size();
  for (int i = 0; i < this->presence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->presence(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsSetPresenceMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsSetPresenceMessage*>(&from));
}

void FriendsSetPresenceMessage::MergeFrom(const FriendsSetPresenceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  presence_.MergeFrom(from.presence_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsSetPresenceMessage::CopyFrom(const FriendsSetPresenceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsSetPresenceMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->presence())) return false;
  return true;
}

void FriendsSetPresenceMessage::Swap(FriendsSetPresenceMessage* other) {
  if (other != this) {
    presence_.Swap(&other->presence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsSetPresenceMessage::GetTypeName() const {
  return "FriendsSetPresenceMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsPresence::kKeyFieldNumber;
const int FriendsPresence::kValueFieldNumber;
#endif  // !_MSC_VER

FriendsPresence::FriendsPresence()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsPresence)
}

void FriendsPresence::InitAsDefaultInstance() {
}

FriendsPresence::FriendsPresence(const FriendsPresence& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsPresence)
}

void FriendsPresence::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsPresence::~FriendsPresence() {
  // @@protoc_insertion_point(destructor:FriendsPresence)
  SharedDtor();
}

void FriendsPresence::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsPresence& FriendsPresence::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsPresence* FriendsPresence::default_instance_ = NULL;

FriendsPresence* FriendsPresence::New() const {
  return new FriendsPresence;
}

void FriendsPresence::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsPresence)
  return false;
#undef DO_
}

void FriendsPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsPresence)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsPresence)
}

int FriendsPresence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsPresence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsPresence*>(&from));
}

void FriendsPresence::MergeFrom(const FriendsPresence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsPresence::CopyFrom(const FriendsPresence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsPresence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FriendsPresence::Swap(FriendsPresence* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsPresence::GetTypeName() const {
  return "FriendsPresence";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsGetUserAvatarMessage::kGuidFieldNumber;
#endif  // !_MSC_VER

FriendsGetUserAvatarMessage::FriendsGetUserAvatarMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsGetUserAvatarMessage)
}

void FriendsGetUserAvatarMessage::InitAsDefaultInstance() {
}

FriendsGetUserAvatarMessage::FriendsGetUserAvatarMessage(const FriendsGetUserAvatarMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsGetUserAvatarMessage)
}

void FriendsGetUserAvatarMessage::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsGetUserAvatarMessage::~FriendsGetUserAvatarMessage() {
  // @@protoc_insertion_point(destructor:FriendsGetUserAvatarMessage)
  SharedDtor();
}

void FriendsGetUserAvatarMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsGetUserAvatarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsGetUserAvatarMessage& FriendsGetUserAvatarMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsGetUserAvatarMessage* FriendsGetUserAvatarMessage::default_instance_ = NULL;

FriendsGetUserAvatarMessage* FriendsGetUserAvatarMessage::New() const {
  return new FriendsGetUserAvatarMessage;
}

void FriendsGetUserAvatarMessage::Clear() {
  guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsGetUserAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsGetUserAvatarMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsGetUserAvatarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsGetUserAvatarMessage)
  return false;
#undef DO_
}

void FriendsGetUserAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsGetUserAvatarMessage)
  // required int32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsGetUserAvatarMessage)
}

int FriendsGetUserAvatarMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsGetUserAvatarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsGetUserAvatarMessage*>(&from));
}

void FriendsGetUserAvatarMessage::MergeFrom(const FriendsGetUserAvatarMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsGetUserAvatarMessage::CopyFrom(const FriendsGetUserAvatarMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGetUserAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendsGetUserAvatarMessage::Swap(FriendsGetUserAvatarMessage* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsGetUserAvatarMessage::GetTypeName() const {
  return "FriendsGetUserAvatarMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsGetUserAvatarResultMessage::kResultFieldNumber;
const int FriendsGetUserAvatarResultMessage::kGuidFieldNumber;
const int FriendsGetUserAvatarResultMessage::kFileDataFieldNumber;
#endif  // !_MSC_VER

FriendsGetUserAvatarResultMessage::FriendsGetUserAvatarResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsGetUserAvatarResultMessage)
}

void FriendsGetUserAvatarResultMessage::InitAsDefaultInstance() {
}

FriendsGetUserAvatarResultMessage::FriendsGetUserAvatarResultMessage(const FriendsGetUserAvatarResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsGetUserAvatarResultMessage)
}

void FriendsGetUserAvatarResultMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  guid_ = 0;
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsGetUserAvatarResultMessage::~FriendsGetUserAvatarResultMessage() {
  // @@protoc_insertion_point(destructor:FriendsGetUserAvatarResultMessage)
  SharedDtor();
}

void FriendsGetUserAvatarResultMessage::SharedDtor() {
  if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsGetUserAvatarResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsGetUserAvatarResultMessage& FriendsGetUserAvatarResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsGetUserAvatarResultMessage* FriendsGetUserAvatarResultMessage::default_instance_ = NULL;

FriendsGetUserAvatarResultMessage* FriendsGetUserAvatarResultMessage::New() const {
  return new FriendsGetUserAvatarResultMessage;
}

void FriendsGetUserAvatarResultMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendsGetUserAvatarResultMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, guid_);
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filedata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsGetUserAvatarResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsGetUserAvatarResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // required int32 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fileData;
        break;
      }

      // required bytes fileData = 3;
      case 3: {
        if (tag == 26) {
         parse_fileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsGetUserAvatarResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsGetUserAvatarResultMessage)
  return false;
#undef DO_
}

void FriendsGetUserAvatarResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsGetUserAvatarResultMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

  // required bytes fileData = 3;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->filedata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsGetUserAvatarResultMessage)
}

int FriendsGetUserAvatarResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required bytes fileData = 3;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filedata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsGetUserAvatarResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsGetUserAvatarResultMessage*>(&from));
}

void FriendsGetUserAvatarResultMessage::MergeFrom(const FriendsGetUserAvatarResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsGetUserAvatarResultMessage::CopyFrom(const FriendsGetUserAvatarResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGetUserAvatarResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendsGetUserAvatarResultMessage::Swap(FriendsGetUserAvatarResultMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guid_, other->guid_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsGetUserAvatarResultMessage::GetTypeName() const {
  return "FriendsGetUserAvatarResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsRosterMessage_FriendDetails::kIdFieldNumber;
const int FriendsRosterMessage_FriendDetails::kUsernameFieldNumber;
const int FriendsRosterMessage_FriendDetails::kIsonlineFieldNumber;
const int FriendsRosterMessage_FriendDetails::kGameFieldNumber;
const int FriendsRosterMessage_FriendDetails::kHostnameFieldNumber;
const int FriendsRosterMessage_FriendDetails::kCurrentServerFieldNumber;
#endif  // !_MSC_VER

FriendsRosterMessage_FriendDetails::FriendsRosterMessage_FriendDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsRosterMessage.FriendDetails)
}

void FriendsRosterMessage_FriendDetails::InitAsDefaultInstance() {
}

FriendsRosterMessage_FriendDetails::FriendsRosterMessage_FriendDetails(const FriendsRosterMessage_FriendDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsRosterMessage.FriendDetails)
}

void FriendsRosterMessage_FriendDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isonline_ = 0;
  game_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsRosterMessage_FriendDetails::~FriendsRosterMessage_FriendDetails() {
  // @@protoc_insertion_point(destructor:FriendsRosterMessage.FriendDetails)
  SharedDtor();
}

void FriendsRosterMessage_FriendDetails::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (game_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (current_server_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete current_server_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsRosterMessage_FriendDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsRosterMessage_FriendDetails& FriendsRosterMessage_FriendDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsRosterMessage_FriendDetails* FriendsRosterMessage_FriendDetails::default_instance_ = NULL;

FriendsRosterMessage_FriendDetails* FriendsRosterMessage_FriendDetails::New() const {
  return new FriendsRosterMessage_FriendDetails;
}

void FriendsRosterMessage_FriendDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendsRosterMessage_FriendDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, isonline_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_game()) {
      if (game_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_current_server()) {
      if (current_server_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        current_server_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsRosterMessage_FriendDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsRosterMessage.FriendDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isonline;
        break;
      }

      // required int32 isonline = 3;
      case 3: {
        if (tag == 24) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game;
        break;
      }

      // required string game = 4;
      case 4: {
        if (tag == 34) {
         parse_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hostname;
        break;
      }

      // required string hostname = 5;
      case 5: {
        if (tag == 42) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_current_server;
        break;
      }

      // required string current_server = 6;
      case 6: {
        if (tag == 50) {
         parse_current_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsRosterMessage.FriendDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsRosterMessage.FriendDetails)
  return false;
#undef DO_
}

void FriendsRosterMessage_FriendDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsRosterMessage.FriendDetails)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required int32 isonline = 3;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isonline(), output);
  }

  // required string game = 4;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game(), output);
  }

  // required string hostname = 5;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hostname(), output);
  }

  // required string current_server = 6;
  if (has_current_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->current_server(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsRosterMessage.FriendDetails)
}

int FriendsRosterMessage_FriendDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 isonline = 3;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }

    // required string game = 4;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game());
    }

    // required string hostname = 5;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string current_server = 6;
    if (has_current_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_server());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsRosterMessage_FriendDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsRosterMessage_FriendDetails*>(&from));
}

void FriendsRosterMessage_FriendDetails::MergeFrom(const FriendsRosterMessage_FriendDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_current_server()) {
      set_current_server(from.current_server());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsRosterMessage_FriendDetails::CopyFrom(const FriendsRosterMessage_FriendDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsRosterMessage_FriendDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FriendsRosterMessage_FriendDetails::Swap(FriendsRosterMessage_FriendDetails* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(isonline_, other->isonline_);
    std::swap(game_, other->game_);
    std::swap(hostname_, other->hostname_);
    std::swap(current_server_, other->current_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsRosterMessage_FriendDetails::GetTypeName() const {
  return "FriendsRosterMessage.FriendDetails";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FriendsRosterMessage::kResultFieldNumber;
const int FriendsRosterMessage::kNumResultsFieldNumber;
const int FriendsRosterMessage::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendsRosterMessage::FriendsRosterMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsRosterMessage)
}

void FriendsRosterMessage::InitAsDefaultInstance() {
}

FriendsRosterMessage::FriendsRosterMessage(const FriendsRosterMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsRosterMessage)
}

void FriendsRosterMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  numresults_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsRosterMessage::~FriendsRosterMessage() {
  // @@protoc_insertion_point(destructor:FriendsRosterMessage)
  SharedDtor();
}

void FriendsRosterMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsRosterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsRosterMessage& FriendsRosterMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsRosterMessage* FriendsRosterMessage::default_instance_ = NULL;

FriendsRosterMessage* FriendsRosterMessage::New() const {
  return new FriendsRosterMessage;
}

void FriendsRosterMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendsRosterMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, numresults_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsRosterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsRosterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numResults;
        break;
      }

      // required int32 numResults = 2;
      case 2: {
        if (tag == 16) {
         parse_numResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numresults_)));
          set_has_numresults();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }

      // repeated .FriendsRosterMessage.FriendDetails friends = 3;
      case 3: {
        if (tag == 26) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsRosterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsRosterMessage)
  return false;
#undef DO_
}

void FriendsRosterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsRosterMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 numResults = 2;
  if (has_numresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numresults(), output);
  }

  // repeated .FriendsRosterMessage.FriendDetails friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->friends(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsRosterMessage)
}

int FriendsRosterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 numResults = 2;
    if (has_numresults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numresults());
    }

  }
  // repeated .FriendsRosterMessage.FriendDetails friends = 3;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsRosterMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsRosterMessage*>(&from));
}

void FriendsRosterMessage::MergeFrom(const FriendsRosterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_numresults()) {
      set_numresults(from.numresults());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsRosterMessage::CopyFrom(const FriendsRosterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsRosterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->friends())) return false;
  return true;
}

void FriendsRosterMessage::Swap(FriendsRosterMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(numresults_, other->numresults_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsRosterMessage::GetTypeName() const {
  return "FriendsRosterMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FriendsRequestRoster::FriendsRequestRoster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendsRequestRoster)
}

void FriendsRequestRoster::InitAsDefaultInstance() {
}

FriendsRequestRoster::FriendsRequestRoster(const FriendsRequestRoster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendsRequestRoster)
}

void FriendsRequestRoster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsRequestRoster::~FriendsRequestRoster() {
  // @@protoc_insertion_point(destructor:FriendsRequestRoster)
  SharedDtor();
}

void FriendsRequestRoster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsRequestRoster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsRequestRoster& FriendsRequestRoster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsRequestRoster* FriendsRequestRoster::default_instance_ = NULL;

FriendsRequestRoster* FriendsRequestRoster::New() const {
  return new FriendsRequestRoster;
}

void FriendsRequestRoster::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendsRequestRoster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:FriendsRequestRoster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:FriendsRequestRoster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendsRequestRoster)
  return false;
#undef DO_
}

void FriendsRequestRoster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendsRequestRoster)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:FriendsRequestRoster)
}

int FriendsRequestRoster::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsRequestRoster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsRequestRoster*>(&from));
}

void FriendsRequestRoster::MergeFrom(const FriendsRequestRoster& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendsRequestRoster::CopyFrom(const FriendsRequestRoster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsRequestRoster::IsInitialized() const {

  return true;
}

void FriendsRequestRoster::Swap(FriendsRequestRoster* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsRequestRoster::GetTypeName() const {
  return "FriendsRequestRoster";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
